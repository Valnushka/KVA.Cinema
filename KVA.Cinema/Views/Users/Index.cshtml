@model PaginatedList<KVA.Cinema.Models.User.UserDisplayViewModel>

@using KVA.Cinema.Models.ViewModels.User;
@using KVA.Cinema.Models.ViewModels;

@{
    ViewData["Title"] = "Users List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Users List</h1>

@if (User.Identity.IsAuthenticated)
{
    <p>
        @Html.ActionLink("Create New", "Create", "Users", null, new { @class = "btn btn-primary" })
    </p>
}

@using (Html.BeginForm())
{
    <div>
        <p>
            Find by name: <input type="text" name="SearchString" value=@ViewBag.CurrentFilter />
            <input type="submit" value="Search" class="btn btn-light" /> |
            @Html.ActionLink("Back to Full List", "Index", "Users")
        </p>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink(
                    ViewBag.SortingField == UserSort.Nickname
                    ? $"Nickname {(ViewBag.SortDescending ? "▾" : "▴")}"
                    : "Nickname",
                    "Index", new { sortingField = UserSort.Nickname, isSortDescending = (ViewBag.SortingField == UserSort.Nickname && !ViewBag.SortDescending) })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortingField == UserSort.FirstName
                    ? $"First name {(ViewBag.SortDescending ? "▾" : "▴")}"
                    : "First name",
                    "Index", new { sortingField = UserSort.FirstName, isSortDescending = (ViewBag.SortingField == UserSort.FirstName && !ViewBag.SortDescending) })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortingField == UserSort.LastName
                    ? $"Last name {(ViewBag.SortDescending ? "▾" : "▴")}"
                    : "Last name",
                    "Index", new { sortingField = UserSort.LastName, isSortDescending = (ViewBag.SortingField == UserSort.LastName && !ViewBag.SortDescending) })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortingField == UserSort.BirthDate
                    ? $"Birth date {(ViewBag.SortDescending ? "▾" : "▴")}"
                    : "Birth date",
                    "Index", new { sortingField = UserSort.BirthDate, isSortDescending = (ViewBag.SortingField == UserSort.BirthDate && !ViewBag.SortDescending) })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortingField == UserSort.Email
                    ? $"Email {(ViewBag.SortDescending ? "▾" : "▴")}"
                    : "Email",
                    "Index", new { sortingField = UserSort.Email, isSortDescending = (ViewBag.SortingField == UserSort.Email && !ViewBag.SortDescending) })
            </th>
            @if (User.Identity.IsAuthenticated)
            {
                <th><!--Header for Action links--></th>
            }
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Nickname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BirthDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>

                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { Id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { Id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { Id = item.Id })
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage() ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage() ? "disabled" : "";
}

@Html.ActionLink("«", "Index", "Users", new { pageNumber = 1 }, new { @class = $"btn btn-light { prevDisabled }" })
@Html.ActionLink("<", "Index", "Users", new { pageNumber = Model.PageIndex - 1 }, new { @class = $"btn btn-light { prevDisabled }" })
@Html.ActionLink(">", "Index", "Users", new { pageNumber = Model.PageIndex + 1 }, new { @class = $"btn btn-light { nextDisabled }" })
@Html.ActionLink("»", "Index", "Users", new { pageNumber = Model.PagesTotal }, new { @class = $"btn btn-light { nextDisabled }" })

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}