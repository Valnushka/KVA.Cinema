@model PaginatedList<KVA.Cinema.ViewModels.SubscriptionDisplayViewModel>

@using KVA.Cinema.ViewModels;

@{
    ViewData["Title"] = "Subscriptions List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Subscriptions List</h1>

@if (User.Identity.IsAuthenticated)
{
    <p>
        @Html.ActionLink("Create New", "Create", "Subscriptions", null, new { @class = "btn btn-primary" })
    </p>
}

@using (Html.BeginForm())
{
    <div>
        <p>
            Find by title:
            <input type="text" name="SearchString" value=@ViewBag.CurrentFilter />
            <input type="hidden" name="pageNumber" value="1" />
            <input type="submit" value="Search" class="btn btn-light" /> |
            @Html.ActionLink("Reset filters", "Index", "Subscriptions")
        </p>
    </div>
}

<table class="table">
    <thead>
        <tr>
            @if (User.Identity.IsAuthenticated)
            {
                <th><!--Header for "Buy" button--></th>
            }
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.Title.ToString()
                    ? $"Title {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Title",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.Cost.ToString()
                    ? $"Cost ($) {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Cost ($)",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.ReleasedIn.ToString()
                    ? $"Released in {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Released in",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.Duration.ToString()
                    ? $"Duration (days) {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Duration (days)",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.AvailableUntil.ToString()
                    ? $"Available to buy until {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Available to buy until",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            <th>
                @Html.ActionLink(
                    ViewBag.SortColumn == SubscriptionSort.Level.ToString()
                    ? $"Level {(ViewBag.IsSortDescending ? "▾" : "▴")}"
                    : "Level",
                    "Index",
                    new
                    {
                        sortColumn = SubscriptionSort.Title.ToString(),
                        isSortDescending = (ViewBag.SortColumn == SubscriptionSort.Title.ToString() && !ViewBag.IsSortDescending),
                        searchString = ViewBag.CurrentFilter
                    })
            </th>
            @if (User.Identity.IsAuthenticated)
            {
                <th><!--Header for Action links--></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>

                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        @if (item.IsPurchasedByCurrentUser)
                        {
                            @Html.ActionLink("Cancel", "CancelSubscription", "Users", new { subscriptionId = item.Id }, new { @class = "btn btn-primary", title = "Cancel subscription" })
                            @Html.ActionLink("Buy", "", new { subscriptionId = item.Id }, new { @class = "btn btn-secondary disabled", title = "You are already have this subscription" })
                        }
                        else
                        {
                            @Html.ActionLink("Buy", "BuySubscription", "Users", new { subscriptionId = item.Id }, new { @class = "btn btn-primary", title = "Buy this subscription" })
                        }
                    </td>
                }

                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cost)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReleasedIn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Duration)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AvailableUntil)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LevelName)
                </td>

                @if (User.Identity.IsAuthenticated)
                {
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { Id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { Id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { Id = item.Id })
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@await Html.PartialAsync("_Pagination");

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}